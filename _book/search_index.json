[
["readxl.html", "Chapter 3 readxl 3.1 Summary 3.2 Objectives 3.3 Resources 3.4 Lesson 3.5 Fun facts ideas: 3.6 Interludes (deep thoughts/openscapes) 3.7 Activity: Import some invertebrates! 3.8 Efficiency Tips", " Chapter 3 readxl 3.1 Summary Check this, may need to be a block quote: The readxl package makes it easy to import tabular data from Excel spreadsheets (.xls or .xlsx files) and includes several options for cleaning data during import. readxl has no external dependencies and functions on any operating system, making it an OS- and user-friendly package that simplifies getting your data from Excel into R. 3.2 Objectives Use readr::read_csv() to read in a comma separated value (CSV) file Use readxl::read_excel() to read in an Excel worksheet from a workbook Replace a specific string/value in a spreadsheet with with NA Skip n rows when importing an Excel worksheet Use readxl::read_excel() to read in parts of a worksheet (by cell range) Specify column names when importing Excel data Read and combine data from multiple Excel worksheets into a single df using purrr::map_df() Write data using readr::write_csv() or writexl::write_excel() Workflows with readxl: considerations, limitations, reproducibility 3.3 Resources https://readxl.tidyverse.org/ readxl Workflows article (from tidyverse.org) 3.4 Lesson 3.4.1 Lesson prep: get data files into your working directory In Session 1, we introduced how and why R Projects are great for reproducibility, because our self-contained working directory will be the first place R looks for files. You downloaded four files for this workshop: fish_counts_curated.csv invert_counts_curated.xlsx kelp_counts_curated.xlsx substrate_cover_curated.xlsx Copy and paste those files into the ‘r-and-excel’ folder on your computer. Notice that now these files are in your working directory when you go back to that Project in RStudio (check the ‘Files’ tab). That means they’re going to be in the first place R will look when you ask it to find a file to read in. 3.4.2 Create a new .R script, attach the tidyverse, readxl and writexl packages In your RforExcelUsers project in RStudio, open a new .R script and add a useful header to the top of it. For example, at a minimum: # -------------------------------- # A descriptive title # Summary of what this script is for # Your name # Contact information # -------------------------------- # Other things you might include: required packages or datasets, relevant links (e.g. to raw data source, GitHub repo, etc.), citations and sources. In this lesson, we’ll read in a CSV file with the readr::read_csv() function, so we need to have the readr package attached. Since it’s part of the tidyverse, we’ll go ahead and attach the tidyverse package below our script header using library(package_name). It’s a good idea to attach all necessary packages near the top of a script, so we’ll also attach the readxl packages here. # Attach the tidyverse, readxl and writexl packages: library(tidyverse) library(readxl) library(writexl) Now, all of the packages and functions within the tidyverse and readxl, including readr::read_csv() and readxl::read_excel(), are available for use. 3.4.3 Use readr::read_csv() to read in data from a CSV file There are many types of files containing data that you might want to work with in R. A common one is a comma separated value (CSV) file, which contains values with each column entry separated by a comma delimiter. CSVs can be opened, viewed, and worked with in Excel just like an .xls or .xlsx file - but let’s learn how to get data directly from a CSV into R where we can work with it more reproducibly. The CSV we’ll read in here is called “fish_counts_curated.csv”, and contains observations for “the abundance and size of fish species as part of SBCLTER’s kelp forest monitoring program to track long-term patterns in species abundance and diversity” from the Santa Barbara Channel Long Term Ecological Research program. Source: Reed D. 2018. SBC LTER: Reef: Kelp Forest Community Dynamics: Fish abundance. Environmental Data Initiative. https://doi.org/10.6073/pasta/dbd1d5f0b225d903371ce89b09ee7379. Dataset accessed 9/26/2019. Read in the “fish_counts_curated.csv” file read_csv(&quot;file_name.csv&quot;), and store it in R as an object called fish_counts: fish_counts &lt;- read_csv(&quot;fish_counts_curated.csv&quot;) Notice that the name of the stored object (here, fish_counts) will show up in our Environment tab in RStudio. Click on the object in the Environment, and R will automatically run the View() function for you to pull up your data in a separate viewing tab. Now we can look at it in the spreadsheet format we’re used to. Here are a few other functions for quickly exploring imported data: summary(): summary of class, dimensions, NA values, etc. names(): variable names (column headers) ls(): list all objects in environment head(): Show the first x rows (default is 6 lines) tail(): Show the last x rows (default is 6 lines) Now let’s make a simple plot of some fish counts with ggplot2. ggplot(fish_counts, aes(x = year, y = total_count)) + geom_col(aes(fill = common_name)) + facet_wrap(~site) Now that we have our fish counts data ready to work with in R, let’s get the substrate cover and kelp data (both .xlsx files). In the following sections, we’ll learn that we can use readxl::read_excel() to read in Excel files directly. 3.4.4 Use readxl::read_excel() to read in a single Excel worksheet First, take a look at substrate_cover_curated.xlsx in Excel, which contains a single worksheet with substrate type and percent cover observations at different sampling locations in the Santa Barbara Channel. A few things to notice: The file contains a single worksheet There are multiple rows containing text information up top Where observations were not recorded, there exists ‘-9999’ Let’s go ahead and read in the data. If the file is in our working directory, we can read in a single worksheet .xlsx file using readxl::read_excel(&quot;file_name.xlsx&quot;). Note: readxl::read_excel() works for both .xlsx and .xls types. Like this: substrate_cover &lt;- read_excel(&quot;substrate_cover_curated.xlsx&quot;) Tada? Not quite. Click on the object name (substrate_cover) in the Environment to view the data in a new tab. A few things aren’t ideal: substrate_cover ## # A tibble: 23,942 x 9 ## `Substrate cover data… ...2 ...3 ...4 ...5 ...6 ...7 ...8 ...9 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Source: https://porta… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 Accessed: 9/28/2019 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 year month date site trans… quad side subs… perc… ## 5 -9999 -9999 -9999 carp 1 20 i b -9999 ## 6 2000 9 -9999 carp 1 20 o b -9999 ## 7 2000 9 9/8/00 carp 1 20 i b 100 ## 8 2000 9 9/8/00 carp 1 20 o b 100 ## 9 2000 9 9/8/00 carp 1 40 i b 100 ## 10 2000 9 9/8/00 carp 1 40 o b 100 ## # … with 23,932 more rows The top row of text has automatically become the (messy) column headers There are multiple descriptive rows before we actually get to the data There are -9999s that we want R to understand NA instead We can deal with those issues by adding arguments within read_excel(). Include argument skip = n to skip the first ‘n’ rows when importing data, and na = &quot;this&quot; to replace “this” with NA when importing: substrate_cover &lt;- read_excel(&quot;curation/substrate_cover_curated.xlsx, skip = 4, na = &quot;-9999&quot;) substrate_cover ## # A tibble: 23,938 x 9 ## year month date site transect quad side substrate_type ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; carp 1 20 i b ## 2 2000 9 &lt;NA&gt; carp 1 20 o b ## 3 2000 9 9/8/… carp 1 20 i b ## 4 2000 9 9/8/… carp 1 20 o b ## 5 2000 9 9/8/… carp 1 40 i b ## 6 2000 9 9/8/… carp 1 40 o b ## 7 2000 9 9/8/… carp 2 20 i b ## 8 2000 9 9/8/… carp 2 20 o b ## 9 2000 9 9/8/… carp 2 40 i b ## 10 2000 9 9/8/… carp 2 40 o b ## # … with 23,928 more rows, and 1 more variable: percent_cover &lt;chr&gt; Check out substrate_cover, and see that the first row after the 4 skipped are the column names, and all -9999s have been updated to NA. Hooray! 3.4.5 Use readxl::read_excel() to read in only part of an Excel worksheet We always advocate for leaving the raw data raw, and writing a complete script containing all steps of data wrangling &amp; transformation. But in some situations (be careful), you may want to specify a range of cells to read in from an Excel worksheet. You can specify a range of cells to read in using the range = argument in read_excel(). For example, if I want to read in the rectangle from D12:I15 in substrate_cover_curated.xlsx - only observations for Carpenteria Beach (Transect 2) in September 2000 - I can use: carp_cover_2000 &lt;- readxl::read_excel(&quot;substrate_cover_curated.xlsx&quot;, range = &quot;D12:I15&quot;) But yuck. Look at carp_cover_2000 and you’ll notice that the first row of that range is automatically made the column headers. To keep all rows within a range and add your own column names, add a col_names = argument: carp_cover_2000 &lt;- readxl::read_excel(&quot;substrate_cover_curated.xlsx&quot;, range = &quot;D12:I15&quot;, col_names = c(&quot;site_name&quot;, &quot;transect&quot;, &quot;quad&quot;, &quot;plot_side&quot;, &quot;type&quot;, &quot;coverage&quot;)) carp_cover_2000 ## # A tibble: 4 x 6 ## site_name transect quad plot_side type coverage ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 carp 2 20 i b 90 ## 2 carp 2 20 o b 80 ## 3 carp 2 40 i b 80 ## 4 carp 2 40 o b 85 So far we’ve read in a single CSV file using readr::read_csv(), and an Excel file containing a single worksheet with readxl::read_excel(). Now let’s read in data from an Excel workbook with multiple worksheets. 3.4.6 Use readxl::read_excel() to read in selected worksheets from a workbook Now, we’ll read in the kelp fronds data from file kelp_counts_curated.xlsx. If you open the Excel workbook, you’ll see that it contains multiple worksheets with giant kelp observations in the Santa Barbara Channel during July 2016, 2017, and 2018, with data collected at each site in a separate worksheet. To read in a single Excel worksheet from a workbook we’ll again use readxl::read_excel(&quot;file_name.xlsx&quot;), but we’ll need to let R know which worksheet to get. Let’s read in the kelp data just like we did above, as an object called kelp_counts. kelp_counts &lt;- readxl::read_excel(&quot;kelp_counts_curated.xlsx&quot;) You might be thinking, “Hooray, I got all of my Excel workbook data!” But remember to always look at your data - you will see that actually only the first worksheet was read in. The default in readxl::read_excel() is to read in the first worksheet in a multi-sheet Excel workbook. To check the worksheet names in an Excel workbook, use readxl::excel_sheets(): readxl::excel_sheets(&quot;kelp_counts_curated.xlsx&quot;) If we want to read in data from a worksheet other than the first one in an Excel workbook, we can specify the correct worksheet by name or position by adding the sheet argument. Let’s read in data from the worksheet named golb (Goleta Beach) in the kelp_counts_curated.xlsx workbook: kelp_golb &lt;- readxl::read_excel(&quot;kelp_counts_curated.xlsx&quot;, sheet = &quot;golb&quot;) Note that you can also specify a worksheet by position: since golb is the 6th worksheet in the workbook, we could also use the following: kelp_golb &lt;- readxl::read_excel(&quot;kelp_counts_curated.xlsx&quot;, sheet = 6) kelp_golb ## # A tibble: 3 x 4 ## year month site total_fronds ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2016 7 golb 2557 ## 2 2017 7 golb 1575 ## 3 2018 7 golb 1629 3.4.7 Read in and combine data from multiple worksheets into a data frame simultaneously with purrr::map_df() So far, we’ve read in entire Excel worksheets and pieces of a worksheet. What if we have a workbook (like kelp_counts_curated.xlsx) that contains worksheets that contain observations for the same variables, in the same organization? Then we may want to read in data from all worksheets, and combine them into a single data frame. We’ll use purrr::map_df() to loop through all the worksheets in a workbook, reading them in &amp; putting them together into a single df in the process. The steps we’ll go through in the code below are: Set a pathway so that R knows where to look for an Excel workbook Get the names of all worksheets in that workbook with excel_sheets() Set names of a vector with set_names() Read in all worksheets, and put them together into a single data frame with purrr::map_df() QUESTION: Have they learned the pipe operator at this point? Expect the question: Why do I need to use read_excel() instead of just giving it the file path (as below)? kelp_path &lt;- &quot;kelp_counts_curated.xlsx&quot; kelp_all_sites &lt;- kelp_path %&gt;% excel_sheets() %&gt;% set_names() %&gt;% purrr::map_df(read_excel, kelp_path) Check out kelp_all_sites, and notice that now the data from all 11 sites is now collected into a single data frame: kelp_all_sites ## # A tibble: 32 x 4 ## year month site total_fronds ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2016 7 abur 307 ## 2 2017 7 abur 604 ## 3 2018 7 abur 3532 ## 4 2016 7 ahnd 2572 ## 5 2017 7 ahnd 16 ## 6 2018 7 ahnd 16 ## 7 2016 7 aque 11152 ## 8 2017 7 aque 9194 ## 9 2018 7 aque 7754 ## 10 2016 7 bull 6706 ## # … with 22 more rows Awesome! Let’s make a graph with ggplot2: ggplot(kelp_all_sites, aes(x = site, y = total_fronds)) + geom_col(aes(fill = year), position = &quot;dodge&quot;) + scale_fill_manual(values = c(&quot;purple&quot;,&quot;orange&quot;,&quot;gray30&quot;)) 3.4.8 Save data frames as .csv or .xlsx with readr::write_csv() or writexl::write_xlsx() There are a number of reasons you might want to save (/export) data in a data frame as a .csv or Excel worksheet, including: To cache raw data within your project To store copies of intermediate data frames To convert your data back to a format that your coworkers/clients/colleagues will be able to use it more easily Use readr::write_csv(object, &quot;file_name.csv&quot;) to write a data frame to a CSV, or writexl::write_xlsx(object, &quot;file_name.xlsx&quot;) to similarly export as a .xlsx (or .xls) worksheet. In the previous step, we combined all of our kelp frond observations into a single data frame. Wouldn’t it make sense to store a copy? As a CSV: readr::write_csv(kelp_all_sites, &quot;kelp_all_sites.csv&quot;) A cool thing about readr::read_csv() is that it just quietly works without wrecking anything else you do in a sequence, so it’s great to add at the end of a piped sequence. For example, if I want to read in the ‘ivee’ worksheet from kelp_counts_curated.xlsx, select only columns ‘year’ and ‘total_fronds’, then write that new subset to a .csv file, I can pipe all the way through: kelp_ivee &lt;- readxl::read_excel(&quot;kelp_counts_curated.xlsx&quot;, sheet = &quot;ivee&quot;) %&gt;% select(year, total_fronds) %&gt;% write_csv(&quot;kelp_ivee.csv&quot;) Now I’ve created kelp_ivee.csv, but the object kelp_ivee also exists for me to use in R. If needed, I can also export a data frame as an Excel (.xlsx) worksheet: writexl::write_xlsx(kelp_all_sites, &quot;kelp_all_sites.xlsx&quot;) 3.5 Fun facts ideas: Did you know that Clippy shows up to help you in the documentation for ?writexl::write_xlsx()? The name of the purrr package? Why map? 3.6 Interludes (deep thoughts/openscapes) Workflow/reproducibility/readxl workflows article Respecting the tools people are working with already (e.g. don’t make your Excel using co-workers hate you) 3.7 Activity: Import some invertebrates! There’s one dataset we haven’t imported or explored yet: invertebrate counts for 5 popular invertebrates (California cone snail, California spiny lobster, orange cup coral, purple urchin and rock scallops) at 11 sites in the Santa Barbara Channel. Take a look at the invert_counts_curated.xlsx data by opening it in Excel Read in the invert_counts_curated.xlsx worksheet as object ‘inverts_july’, only retaining site, common_name, and 2016 and setting the existing first row in the worksheet as to column headers upon import Explore the imported data frame using View, names, head, tail, etc. Write ‘inverts_july’ to a CSV file in your working directory called “inverts_july.csv” Create a basic graph of invert counts in 2016 (y-axis) by site (x-axis), with each species indicated by a different fill color Note: If your column name is a number (not great) you’ll probably want to rename it…but in the meantime, to call it as a variable make sure you put single or double quotes around it (e.g. '2016' or &quot;2016&quot;) so that R recognizes it’s a variable and not a value # Importing only &#39;site&#39; through &#39;2016&#39; columns: inverts_july &lt;- readxl::read_excel(&quot;curation/invert_counts_curated.xlsx&quot;, range = &quot;B1:D56&quot;) # Do some basic exploring (why might we want to do this in the Console instead?): #View(inverts_july) names(inverts_july) head(inverts_july) tail(inverts_july) ls() # Make a gg-graph plot: inverts_graph &lt;- ggplot(inverts_july, aes(x = site, y = `2016`)) + geom_col(aes(fill = common_name), position = &quot;dodge&quot;) inverts_graph 3.8 Efficiency Tips Add an assignment arrow in script/code chunk (&lt;-): Alt + minus (-) Undo shortcut: Command + Z Redo shortcut: Command + Shift + Z "]
]
